@page "/home"
@using MauiApp6.Components.Layout;


<nav class="navbar  justify-content-between">
    <h1 >Transaction</h1>
    <button class="btn btn-primary" type="button" @onclick="OpenAddTransactionDialog">
        <span class="oi oi-plus" /> Add
    </button>
</nav>
<div class="d-flex gap-3 my-3">
    <div class="form-floating">
        <select class="form-select" @bind="_selectedTransactionType">
            <option value="All">All Types</option>
            @foreach (var type in Enum.GetValues(typeof(TransactionType)))
            {
                <option value="@type">@type</option>
            }
        </select>
        <label class="labell">Transaction Type</label>
    </div>

    <div class="form-floating">
        <select class="form-select" @bind="_selectedTag">
            <option value="All">All Tags</option>
            @foreach (var tag in _availableTags)
            {
                <option value="@tag">@tag</option>
            }
        </select>
        <label class="labell">Filter by Tag</label>
    </div>
    <div class="form-floating">
        <input type="date" class="form-control"
               @bind="_fromDate"
               max="@_toDate?.ToString("yyyy-MM-dd")" />
        <label>From Date</label>
    </div>

    <div class="form-floating">
        <input type="date" class="form-control"
               @bind="_toDate"
               min="@_fromDate?.ToString("yyyy-MM-dd")" />
        <label>To Date</label>
    </div>

    <button class="btn btn-secondary" @onclick="ClearDateFilter">
        <span class="oi oi-x" /> Clear Dates
    </button>
</div>

<table class="table">
    <thead>
        <tr>
            
            <th>
                <div class="d-flex">
                    Transaction Name
                    <input type="search" class="form-control search" placeholder="Search" @oninput="SearchTaskName" />
                    <a class='btn text-@(_transactionsortBy == "TransactionName" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("TransactionName")'>
                        <span class='oi oi-sort-@(_transactionsortBy == "TransactionName" ? _transactionsortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Transaction Type
                    <a class='btn text-@(_transactionsortBy == "transactionType" ? "primary" : "secondary")' @onclick='()=>SortByHandler("transactionType")'>
                        <span class='oi oi-sort-@(_transactionsortBy == "transactionType" ? _transactionsortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Amount
                    <a class='btn text-@(_transactionsortBy == "amount" ? "primary" : "secondary")' @onclick='()=>SortByHandler("amount")'>
                        <span class='oi oi-sort-@(_transactionsortBy == "amount" ? _transactionsortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>Custom Tags</th>
            <th>Notes</th>
            <th>
                <div class="d-flex">
                    Transact Date 
                    <a class='btn text-@(_transactionsortBy == "dueDate" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("dueDate")'>
                        <span class='oi oi-sort-@(_transactionsortBy == "dueDate" ? _transactionsortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Created At
                    <a class='btn text-@(_transactionsortBy == "createdAt" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("createdAt")'>
                        <span class='oi oi-sort-@(_transactionsortBy == "createdAt" ? _transactionsortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @{
                
            IEnumerable<TransactionItem> transactionList = _transaction;

            if (_fromDate.HasValue)
            {
                transactionList = transactionList.Where(t => t.DueDate.Date >= _fromDate.Value.Date);
            }
            if (_toDate.HasValue)
            {
                transactionList = transactionList.Where(t => t.DueDate.Date <= _toDate.Value.Date);
            }


            if (_selectedTransactionType != "All")
            {
                var type = Enum.Parse<TransactionType>(_selectedTransactionType);
                transactionList = transactionList.Where(t => t.TransactionType == type);
            }

            // Apply tag filter
            if (_selectedTag != "All")
            {
                transactionList = transactionList.Where(t => t.Tags.Contains(_selectedTag));
            }
           
            else if (_transactionsortBy == "TransactionName")
            {
                transactionList = _transactionsortDirection == "ascending" ? transactionList.OrderBy(t => t.TransactionName) : transactionList.OrderByDescending(t =>
                t.TransactionName);
            }
            else if (_transactionsortBy == "amount")
            {
                transactionList = _transactionsortDirection == "ascending" ? transactionList.OrderBy(t => t.Amount) : transactionList.OrderByDescending(t =>
                t.Amount);
            }
            else if (_transactionsortBy == "transactionType")
            {
                transactionList = _transactionsortDirection == "ascending" ? transactionList.OrderBy(t => t.TransactionType) : transactionList.OrderByDescending(t =>
                t.TransactionType);
            }
            
            else if (_transactionsortBy == "dueDate")
            {
                transactionList = _transactionsortDirection == "ascending" ? transactionList.OrderBy(t => t.DueDate) : transactionList.OrderByDescending(t =>
                t.DueDate);
            }
            else if (_transactionsortBy == "createdAt")
            {
                transactionList = _transactionsortDirection == "ascending" ? transactionList.OrderBy(t => t.CreatedAt) : transactionList.OrderByDescending(t =>
                t.CreatedAt);
            }

           

            foreach (var transactionItem in transactionList)
            {
                <tr>

                    <td>@transactionItem.TransactionName</td>
                    <td>@transactionItem.TransactionType</td>
                    <td>@transactionItem.Amount.ToString("C")</td>
                    <td>@string.Join(", ", @transactionItem.Tags)</td>
                    <td>
                        @if (!string.IsNullOrEmpty(transactionItem.Notes))
                        {
                            <span class="text-truncate d-inline-block" style="max-width: 200px;"
                                  title="@transactionItem.Notes">
                                @transactionItem.Notes
                            </span>
                        }
                    </td>
                    <td>
                        @{
                            bool isToday = !transactionItem.IsDone && transactionItem.DueDate == DateTime.Today;
                            bool isOlder = !transactionItem.IsDone && transactionItem.DueDate < DateTime.Today;
                            <p class='small mb-0 @(isToday ? "text-warning" : isOlder ? "text-danger" : "")'>
                                @if (isToday || isOlder)
                                {
                                    <span class="oi oi-warning mr-3" />
                                }
                                @transactionItem.DueDate.ToString("MMM dd, yyyy")
                            </p>
                        }
                    </td>
                    <td>
                        <p class="small mb-0">
                            @transactionItem.CreatedAt.ToString("MMM dd, yyyy h:mm tt")
                        </p>
                    </td>
                    <td>
                        <button disabled="@transactionItem.IsDone" class="btn btn-outline-secondary" type="button"
                                @onclick="()=>OpenEditTodoDialog(transactionItem)">
                            <span class="oi oi-pencil" /> Edit
                        </button>
                        <button class="btn btn-outline-danger" type="button" @onclick="()=>OpenDeleteTransactionDialog(transactionItem)">
                            <span class="oi oi-delete" /> Delete
                        </button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@if (_showEditTransactionDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnEditTodoDialogClose" OkLabel="@_dialogOkLabel">
        <div class="modal-container">
            <div class="form-floating mb-3">
                <input id="taskName" type="text" class="form-control" @bind="_transactionModel.TransactionName" placeholder="Transaction Name" />
                <label for="taskName">Transaction Name </label>
            </div>
            <div class="form-floating mb-3">
                <select class="form-select" @bind="_transactionModel.TransactionType">
                    @foreach (var type in Enum.GetValues(typeof(TransactionType)))
                    {
                        <option value="@type">@type</option>
                    }
                </select>
                <label>Transaction Type</label>
            </div>
            <div class="form-floating mb-3">
                <input type="number" step="0.01" class="form-control" @bind="_transactionModel.Amount" placeholder="Amount" />
                <label>Amount</label>
            </div>
            <div class="mb-3">
                <label class="form-label">Tags</label>
                <div class="d-flex flex-wrap gap-2">
                    @foreach (var tag in _availableTags)
                    {
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox"
                                   checked="@(_transactionModel.Tags.Contains(tag))"
                                   @onchange="@(e => ToggleTag(tag, (bool)e.Value))" />
                            <label class="form-check-label">@tag</label>
                        </div>
                    }
                </div>
            </div>
            <div class="form-floating mb-3">
                <textarea class="form-control"
                          style="height: 100px"
                          placeholder="Enter notes"
                          @bind="_transactionModel.Notes"></textarea>
                <label>Notes (Optional)</label>
            </div>
            <div class="form-floating">
                <label for="dueDate">Transaction Date</label>
                <input id="dueDate" type="date" min='@DateTime.Today.ToString("yyyy-MM-dd")'
                       value='@_transactionModel.DueDate.ToString("yyyy-MM-dd")' @onchange="updateDate"
                       class="form-control text-left" placeholder="Transaction Date" />
            </div>
            @if (!string.IsNullOrEmpty(_editTransactionErrorMessage))
            {
                <AlertMessage Type="danger" Message="@_editTransactionErrorMessage" />
            }
        </div>
    </ModalDialog>
}

@if (_showDeleteTransactionDialog)
{
    <ModalDialog Title="Delete Todo" OnClose="@OnDeleteTransactionDialogClose" OkLabel="Confirm">
        <p>Are you sure you want to delete <strong>@_deleteTransaction.TransactionName</strong> task?</p>
        @if (!string.IsNullOrEmpty(_deleteTransactionErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_deleteTransactionErrorMessage" />
        }
    </ModalDialog>
}

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private bool _showEditTransactionDialog { get; set; }
    private bool _showDeleteTransactionDialog { get; set; }
    private List<TransactionItem> _transaction{ get; set; }
    private TransactionItem _deleteTransaction { get; set; }
    private string _dialogTitle { get; set; }
    private string _dialogOkLabel { get; set; }
    private string _editTransactionErrorMessage { get; set; }
    private string _deleteTransactionErrorMessage { get; set; }
    private TransactionItem _transactionModel { get; set; }
    private string _transactionsortBy = "dueDate";
    private string _transactionsortDirection = "ascending";
    private DateTime? _fromDate;
    private DateTime? _toDate;


    
    // Add this method with your other private methods
    private void ClearDateFilter()
    {
        _fromDate = null;
        _toDate = null;
    }

    
    protected override void OnInitialized()
    {
        _transaction = TransactionService.GetAll(_globalState.CurrentUser.UserId);
    }
    
    private void SortByHandler(string sortByName)
    {
        if (_transactionsortBy == sortByName)
        {
            _transactionsortDirection = _transactionsortDirection == "ascending" ? "descending" : "ascending";
        }
        else
        {
            _transactionsortBy = sortByName;
            _transactionsortDirection = "ascending";
        }
    }
    private List<string> _availableTags = new()
    {
    "Yearly", "Monthly", "Food & Drinks", "Clothes", "Gadgets", "Miscellaneous"
    };

    private string _selectedTransactionType = "All";
    private string _selectedTag = "All";

    private void ToggleTag(string tag, bool isChecked)
    {
        if (isChecked && !_transactionModel.Tags.Contains(tag))
        {
            _transactionModel.Tags.Add(tag);
        }
        else if (!isChecked && _transactionModel.Tags.Contains(tag))
        {
            _transactionModel.Tags.Remove(tag);
        }
    }



    private void OpenAddTransactionDialog()
    {
        _dialogTitle = "Add Transaction";
        _dialogOkLabel = "Add";
        _transactionModel = new TransactionItem();
        _transactionModel.Id = Guid.Empty;
        _showEditTransactionDialog = true;
    }

    private void SearchTaskName(ChangeEventArgs e)
    {
        var searchTerm = e.Value.ToString();
        if (!string.IsNullOrEmpty(searchTerm) && searchTerm.Length > 2)
        {
            _transaction = TransactionService.GetAll(_globalState.CurrentUser.UserId).Where(t =>
            t.TransactionName.ToLower().Contains(searchTerm.ToLower())).ToList();
        }
        else
        {
            _transaction = TransactionService.GetAll(_globalState.CurrentUser.UserId);
        }
    }

    private void OpenEditTodoDialog(TransactionItem editTodo)
    {
        _dialogTitle = "Edit Transaction";
        _dialogOkLabel = "Save";

        _transactionModel = editTodo;

        _showEditTransactionDialog = true;
    }

    private void OpenDeleteTransactionDialog(TransactionItem todoItem)
    {
        _deleteTransaction = todoItem;
        _showDeleteTransactionDialog = true;
    }

    private void updateDate(ChangeEventArgs e)
    {
        _transactionModel.DueDate = DateTime.Parse(e.Value.ToString());
    }
    private void OnEditTodoDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showEditTransactionDialog = false;
        }
        else
        {
            try
            {
                _editTransactionErrorMessage = "";
                if (_transactionModel.Id == Guid.Empty)
                {
                    _transaction = TransactionService.Create(_globalState.CurrentUser.UserId, _transactionModel.TransactionName, _transactionModel.DueDate, _transactionModel.TransactionType, _transactionModel.Amount, _transactionModel.Tags, _transactionModel.Notes);
                }
                else
                {
                    _transaction = TransactionService.Update(_globalState.CurrentUser.UserId, _transactionModel.Id, _transactionModel.TransactionName, _transactionModel.DueDate,
                    _transactionModel.IsDone, _transactionModel.TransactionType, _transactionModel.Amount, _transactionModel.Tags, _transactionModel.Notes);
                }
              
                _showEditTransactionDialog = false;
            }
            catch (Exception e)
            {
                _editTransactionErrorMessage = e.Message;
            }
        }
    }
    private void OnDeleteTransactionDialogClose(bool isCancel)
    {
        if (isCancel)
        {

            _showDeleteTransactionDialog = false;
            _deleteTransaction = null;
        }
        else
        {
            try
            {
                _deleteTransactionErrorMessage = "";
                _transaction = TransactionService.Delete(_globalState.CurrentUser.UserId, _deleteTransaction.Id);
                _showDeleteTransactionDialog = false;
                _deleteTransaction = null;
            }
            catch (Exception e)
            {
                _deleteTransactionErrorMessage = e.Message;
            }
        }
    }
    
    
}
