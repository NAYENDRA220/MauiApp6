@page "/debts"
@using MauiApp6.Components.Layout;
<nav class="navbar justify-content-between">
    <h1>Debts</h1>
    <button class="btn btn-primary" type="button" @onclick="OpenAddDebtDialog">
        <span class="oi oi-plus" /> Add
    </button>
</nav>

<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class='nav-link btn @(_tabFilter == "All" ? "active" : "")' @onclick='()=>TabFilter("All")'>All</a>
    </li>
    <li class="nav-item">
        <a class='nav-link btn @(_tabFilter == "Due" ? "active" : "")' @onclick='()=>TabFilter("Due")'>Due</a>
    </li>
    <li class="nav-item">
        <a class='nav-link btn @(_tabFilter == "Paid" ? "active" : "")' @onclick='()=>TabFilter("Paid")'>Paid</a>
    </li>
</ul>

<div class="d-flex gap-3 my-3">
    <div class="form-floating">
        <select class="form-select" @bind="_selectedDebtType">
            <option value="All">All Types</option>
            @foreach (var type in Enum.GetValues(typeof(DebtType)))
            {
                <option value="@type">@type</option>
            }
        </select>
        <label class="labell">Debt Type</label>
    </div>

    <div class="form-floating">
        <select class="form-select" @bind="_selectedCategory">
            <option value="All">All Categories</option>
            @foreach (var category in _availableCategories)
            {
                <option value="@category">@category</option>
            }
        </select>
        <label class="labell">Filter by Category</label>
    </div>
    <div class="form-floating">
        <input type="date" class="form-control"
               @bind="fromDate"
               max="@toDate?.ToString("yyyy-MM-dd")" />
        <label>From Date</label>
    </div>

    <div class="form-floating">
        <input type="date" class="form-control"
               @bind="toDate"
               min="@fromDate?.ToString("yyyy-MM-dd")" />
        <label>To Date</label>
    </div>

    <button class="btn btn-secondary" @onclick="ClearDateFilter">
        <span class="oi oi-x" /> Clear Dates
    </button>
</div>

<table class="table">
    <thead>
        <tr>
            <th>
                <div class="d-flex">
                    Status
                    <a class='btn text-@(_sortBy == "status" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("status")'>
                        <span class='oi oi-sort-@(_sortBy == "status" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Debt Name
                    <input type="search" class="form-control search" placeholder="Search" @oninput="SearchDebtName" />
                    <a class='btn text-@(_sortBy == "debtName" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("debtName")'>
                        <span class='oi oi-sort-@(_sortBy == "debtName" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Type
                    <a class='btn text-@(_sortBy == "debtType" ? "primary" : "secondary")' @onclick='()=>SortByHandler("debtType")'>
                        <span class='oi oi-sort-@(_sortBy == "debtType" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Amount
                    <a class='btn text-@(_sortBy == "amount" ? "primary" : "secondary")' @onclick='()=>SortByHandler("amount")'>
                        <span class='oi oi-sort-@(_sortBy == "amount" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>Categories</th>
            <th>
                <div class="d-flex">
                    Due Date
                    <a class='btn text-@(_sortBy == "dueDate" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("dueDate")'>
                        <span class='oi oi-sort-@(_sortBy == "dueDate" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Created At
                    <a class='btn text-@(_sortBy == "createdAt" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("createdAt")'>
                        <span class='oi oi-sort-@(_sortBy == "createdAt" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
      @{
            IEnumerable<DebtItem> debtList = _debts;

            if (fromDate.HasValue)
            {
                debtList = debtList.Where(t => t.DueDate.Date >= fromDate.Value.Date);
            }
            if (toDate.HasValue)
            {
                debtList = debtList.Where(t => t.DueDate.Date <= toDate.Value.Date);
            }

            if (_selectedDebtType != "All")
            {
                var type = Enum.Parse<DebtType>(_selectedDebtType);
                debtList = debtList.Where(t => t.DebtType == type);
            }

            if (_selectedCategory != "All")
            {
                debtList = debtList.Where(t => t.Categories.Contains(_selectedCategory));
            }

            if (_sortBy == "status")
            {
                debtList = _sortDirection == "ascending" ? debtList.OrderBy(t => t.IsPaid) : debtList.OrderByDescending(t => t.IsPaid);
            }
            else if (_sortBy == "debtName")
            {
                debtList = _sortDirection == "ascending" ? debtList.OrderBy(t => t.DebtName) : debtList.OrderByDescending(t => t.DebtName);
            }
            else if (_sortBy == "dueDate")
            {
                debtList = _sortDirection == "ascending" ? debtList.OrderBy(t => t.DueDate) : debtList.OrderByDescending(t => t.DueDate);
            }
            else if (_sortBy == "createdAt")
            {
                debtList = _sortDirection == "ascending" ? debtList.OrderBy(t => t.CreatedAt) : debtList.OrderByDescending(t => t.CreatedAt);
            }

            if (_tabFilter == "Due")
            {
                debtList = debtList.Where(t => !t.IsPaid);
            }
            else if (_tabFilter == "Paid")
            {
                debtList = debtList.Where(t => t.IsPaid);
            }

            foreach (var debtItem in debtList)
            {
                <tr>
                    <td>
                        <div class="form-check">
                            <input class="form-check-input me-0" type="checkbox" checked="@debtItem.IsPaid"
                                   @onchange='()=>TogglePaid(debtItem)' />
                        </div>
                    </td>
                    <td class='@(debtItem.IsPaid ? "text-decoration-line-through" : "")'>@debtItem.DebtName</td>
                    <td>@debtItem.DebtType</td>
                    <td>@debtItem.Amount.ToString("C")</td>
                    <td>@string.Join(", ", @debtItem.Categories)</td>
                    <td>
                        @{
                            bool isToday = !debtItem.IsPaid && debtItem.DueDate == DateTime.Today;
                            bool isOlder = !debtItem.IsPaid && debtItem.DueDate < DateTime.Today;
                            <p class='small mb-0 @(isToday ? "text-warning" : isOlder ? "text-danger" : "")'>
                                @if (isToday || isOlder)
                                {
                                    <span class="oi oi-warning mr-3" />
                                }
                                @debtItem.DueDate.ToString("MMM dd, yyyy")
                            </p>
                        }
                    </td>
                    <td>
                        <p class="small mb-0">
                            @debtItem.CreatedAt.ToString("MMM dd, yyyy h:mm tt")
                        </p>
                    </td>
                    <td>
                        <button disabled="@debtItem.IsPaid" class="btn btn-outline-secondary" type="button"
                                @onclick="()=>OpenEditDebtDialog(debtItem)">
                            <span class="oi oi-pencil" /> Edit
                        </button>
                        <button class="btn btn-outline-danger" type="button" @onclick="()=>OpenDeleteDebtDialog(debtItem)">
                            <span class="oi oi-delete" /> Delete
                        </button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@if (_showEditDebtDialog)
{
   <ModalDialog Title="@_dialogTitle" OnClose="@OnEditDebtDialogClose" OkLabel="@_dialogOkLabel">
    <div class="modal-container">
        <div class="form-floating">
            <input id="debtName" type="text" class="form-control" @bind="_debtModel.DebtName" placeholder="Debt Name" />
            <label for="debtName">Debt Name</label>
        </div>
        <div class="form-floating mb-3">
            <select class="form-select" @bind="_debtModel.DebtType">
                @foreach (var type in Enum.GetValues(typeof(DebtType)))
                {
                    <option value="@type">@type</option>
                }
            </select>
            <label>Debt Type</label>
        </div>
        <div class="form-floating mb-3">
            <input type="number" step="0.01" class="form-control" @bind="_debtModel.Amount" placeholder="Amount" />
            <label>Amount</label>
        </div>
        <div class="mb-3">
            <label>Categories</label
         <div class="d-flex flex-wrap gap-2">
                @foreach (var category in _availableCategories)
                {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox"
                               checked="@(_debtModel.Categories.Contains(category))"
                               @onchange="@(e => ToggleCategory(category, (bool)e.Value))" />
                        <label class="form-check-label">@category</label>
                    </div>
                }
            </div>
        </div>

        <div class="form-floating mb-3 ">
                <input id="dueDate" type="date" min='@DateTime.Today.ToString("yyyy-MM-dd")'
                       value='@_debtModel.DueDate.ToString("yyyy-MM-dd")' @onchange="updateDate"
                       class="form-control text-left" placeholder="Transaction Date" />
                <label for="dueDate">Debt Due Date</label>
            </div>

        @if (!string.IsNullOrEmpty(_editDebtErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_editDebtErrorMessage" />
        }
    </div>
    </ModalDialog>
}

@if (_showDeleteDebtDialog)
{
    <ModalDialog Title="Delete Debt" OnClose="@OnDeleteDebtDialogClose" OkLabel="Confirm">
        <p>Are you sure you want to delete <strong>@_deleteDebt.DebtName</strong> debt?</p>
        @if (!string.IsNullOrEmpty(_deleteDebtErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_deleteDebtErrorMessage" />
        }
    </ModalDialog>
}

  