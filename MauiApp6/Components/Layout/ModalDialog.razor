
 <style>
    .button {
        background: #9b4dff;
        color: #fff;
        border: none;
        border-radius: 10px;
        padding: 10px;
        font-size: 1rem;
        font-weight: 600;
        text-transform: uppercase;
        transition: all 0.3s ease;
    }

        .button:hover {
            background: #b366ff;
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(155, 77, 255, 0.6);
        }
 </style>  

    <div class="modal fade show" style="display:block; background-color: rgba(10,10,10,.8);"
         role="dialog">
        <div class="modal-dialog">
            <div class="modal-content" style=" background-color: #2a2a2a;z-index:10 ;">
                <div class="modal-header">
                    <h4 class="modal-title">@Title</h4>
                </div>
                <div class="modal-body">
                    @ChildContent
                </div>
                <div class="modal-footer">
                    <button type="button" class="button" @onclick="@ModalCancel">Cancel</button>
                    <button type="button" class=" button " @onclick=@ModalOk>@OkLabel</button>
                </div>
            </div>
        </div>
    </div>


@code {
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string OkLabel { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(true);
    }

    private Task ModalOk()
    {
        return OnClose.InvokeAsync(false);
    }
}
